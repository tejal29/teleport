// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: v1/service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TerminalServiceClient is the client API for TerminalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TerminalServiceClient interface {
	// ListRootClusters lists root clusters
	ListRootClusters(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (*ListClustersResponse, error)
	// ListLeafClusters lists leaf clusters
	ListLeafClusters(ctx context.Context, in *ListLeafClustersRequest, opts ...grpc.CallOption) (*ListClustersResponse, error)
	// ListDatabases lists databases
	ListDatabases(ctx context.Context, in *ListDatabasesRequest, opts ...grpc.CallOption) (*ListDatabasesResponse, error)
	// ListDatabaseUsers lists allowed users for the given database based on the role set.
	ListDatabaseUsers(ctx context.Context, in *ListDatabaseUsersRequest, opts ...grpc.CallOption) (*ListDatabaseUsersResponse, error)
	// ListServers lists servers
	ListServers(ctx context.Context, in *ListServersRequest, opts ...grpc.CallOption) (*ListServersResponse, error)
	// ListKubes list kubes
	ListKubes(ctx context.Context, in *ListKubesRequest, opts ...grpc.CallOption) (*ListKubesResponse, error)
	// ListApps list apps
	ListApps(ctx context.Context, in *ListAppsRequest, opts ...grpc.CallOption) (*ListAppsResponse, error)
	// AddCluster adds a cluster to profile
	AddCluster(ctx context.Context, in *AddClusterRequest, opts ...grpc.CallOption) (*Cluster, error)
	// RemoveCluster removes a cluster from profile
	RemoveCluster(ctx context.Context, in *RemoveClusterRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// ListGateways lists gateways
	ListGateways(ctx context.Context, in *ListGatewaysRequest, opts ...grpc.CallOption) (*ListGatewaysResponse, error)
	// CreateGateway creates a gateway
	CreateGateway(ctx context.Context, in *CreateGatewayRequest, opts ...grpc.CallOption) (*Gateway, error)
	// RemoveGateway removes a gateway
	RemoveGateway(ctx context.Context, in *RemoveGatewayRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// RestartGateway stops a gateway and starts a new with identical parameters, keeping the
	// original URI. A temporary workaround until it's possible to refresh certs in a running
	// database proxy.
	RestartGateway(ctx context.Context, in *RestartGatewayRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// SetGatewayTargetSubresourceName changes the TargetSubresourceName field of gateway.Gateway
	// and returns the updated version of gateway.Gateway.
	//
	// In Connect this is used to update the db name of a db connection along with the CLI command.
	SetGatewayTargetSubresourceName(ctx context.Context, in *SetGatewayTargetSubresourceNameRequest, opts ...grpc.CallOption) (*Gateway, error)
	// SetGatewayLocalPort starts a new gateway on the new port, stops the old gateway and then
	// assigns the URI of the old gateway to the new one. It does so without fetching a new db cert.
	SetGatewayLocalPort(ctx context.Context, in *SetGatewayLocalPortRequest, opts ...grpc.CallOption) (*Gateway, error)
	// GetAuthSettings returns cluster auth settigns
	GetAuthSettings(ctx context.Context, in *GetAuthSettingsRequest, opts ...grpc.CallOption) (*AuthSettings, error)
	// GetCluster returns a cluster
	GetCluster(ctx context.Context, in *GetClusterRequest, opts ...grpc.CallOption) (*Cluster, error)
	// Login logs in a user to a cluster
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// LoginPasswordless logs in a user to a cluster passwordlessly.
	//
	// The RPC is streaming both ways and the message sequence example for hardware keys are:
	// (-> means client-to-server, <- means server-to-client)
	//
	// Hardware keys:
	// -> Init
	// <- Send PasswordlessPrompt enum TAP to choose a device
	// -> Receive TAP device response
	// <- Send PasswordlessPrompt enum PIN
	// -> Receive PIN response
	// <- Send PasswordlessPrompt enum RETAP to confirm
	// -> Receive RETAP device response
	// <- Send list of credentials (e.g. usernames) associated with device
	// -> Receive the index number associated with the selected credential in list
	// <- End
	LoginPasswordless(ctx context.Context, opts ...grpc.CallOption) (TerminalService_LoginPasswordlessClient, error)
	// ClusterLogin logs out a user from cluster
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// TransferFile sends a request to download/upload a file
	TransferFile(ctx context.Context, in *FileTransferRequest, opts ...grpc.CallOption) (TerminalService_TransferFileClient, error)
}

type terminalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTerminalServiceClient(cc grpc.ClientConnInterface) TerminalServiceClient {
	return &terminalServiceClient{cc}
}

func (c *terminalServiceClient) ListRootClusters(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (*ListClustersResponse, error) {
	out := new(ListClustersResponse)
	err := c.cc.Invoke(ctx, "/teleport.terminal.v1.TerminalService/ListRootClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminalServiceClient) ListLeafClusters(ctx context.Context, in *ListLeafClustersRequest, opts ...grpc.CallOption) (*ListClustersResponse, error) {
	out := new(ListClustersResponse)
	err := c.cc.Invoke(ctx, "/teleport.terminal.v1.TerminalService/ListLeafClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminalServiceClient) ListDatabases(ctx context.Context, in *ListDatabasesRequest, opts ...grpc.CallOption) (*ListDatabasesResponse, error) {
	out := new(ListDatabasesResponse)
	err := c.cc.Invoke(ctx, "/teleport.terminal.v1.TerminalService/ListDatabases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminalServiceClient) ListDatabaseUsers(ctx context.Context, in *ListDatabaseUsersRequest, opts ...grpc.CallOption) (*ListDatabaseUsersResponse, error) {
	out := new(ListDatabaseUsersResponse)
	err := c.cc.Invoke(ctx, "/teleport.terminal.v1.TerminalService/ListDatabaseUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminalServiceClient) ListServers(ctx context.Context, in *ListServersRequest, opts ...grpc.CallOption) (*ListServersResponse, error) {
	out := new(ListServersResponse)
	err := c.cc.Invoke(ctx, "/teleport.terminal.v1.TerminalService/ListServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminalServiceClient) ListKubes(ctx context.Context, in *ListKubesRequest, opts ...grpc.CallOption) (*ListKubesResponse, error) {
	out := new(ListKubesResponse)
	err := c.cc.Invoke(ctx, "/teleport.terminal.v1.TerminalService/ListKubes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminalServiceClient) ListApps(ctx context.Context, in *ListAppsRequest, opts ...grpc.CallOption) (*ListAppsResponse, error) {
	out := new(ListAppsResponse)
	err := c.cc.Invoke(ctx, "/teleport.terminal.v1.TerminalService/ListApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminalServiceClient) AddCluster(ctx context.Context, in *AddClusterRequest, opts ...grpc.CallOption) (*Cluster, error) {
	out := new(Cluster)
	err := c.cc.Invoke(ctx, "/teleport.terminal.v1.TerminalService/AddCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminalServiceClient) RemoveCluster(ctx context.Context, in *RemoveClusterRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/teleport.terminal.v1.TerminalService/RemoveCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminalServiceClient) ListGateways(ctx context.Context, in *ListGatewaysRequest, opts ...grpc.CallOption) (*ListGatewaysResponse, error) {
	out := new(ListGatewaysResponse)
	err := c.cc.Invoke(ctx, "/teleport.terminal.v1.TerminalService/ListGateways", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminalServiceClient) CreateGateway(ctx context.Context, in *CreateGatewayRequest, opts ...grpc.CallOption) (*Gateway, error) {
	out := new(Gateway)
	err := c.cc.Invoke(ctx, "/teleport.terminal.v1.TerminalService/CreateGateway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminalServiceClient) RemoveGateway(ctx context.Context, in *RemoveGatewayRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/teleport.terminal.v1.TerminalService/RemoveGateway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminalServiceClient) RestartGateway(ctx context.Context, in *RestartGatewayRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/teleport.terminal.v1.TerminalService/RestartGateway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminalServiceClient) SetGatewayTargetSubresourceName(ctx context.Context, in *SetGatewayTargetSubresourceNameRequest, opts ...grpc.CallOption) (*Gateway, error) {
	out := new(Gateway)
	err := c.cc.Invoke(ctx, "/teleport.terminal.v1.TerminalService/SetGatewayTargetSubresourceName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminalServiceClient) SetGatewayLocalPort(ctx context.Context, in *SetGatewayLocalPortRequest, opts ...grpc.CallOption) (*Gateway, error) {
	out := new(Gateway)
	err := c.cc.Invoke(ctx, "/teleport.terminal.v1.TerminalService/SetGatewayLocalPort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminalServiceClient) GetAuthSettings(ctx context.Context, in *GetAuthSettingsRequest, opts ...grpc.CallOption) (*AuthSettings, error) {
	out := new(AuthSettings)
	err := c.cc.Invoke(ctx, "/teleport.terminal.v1.TerminalService/GetAuthSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminalServiceClient) GetCluster(ctx context.Context, in *GetClusterRequest, opts ...grpc.CallOption) (*Cluster, error) {
	out := new(Cluster)
	err := c.cc.Invoke(ctx, "/teleport.terminal.v1.TerminalService/GetCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminalServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/teleport.terminal.v1.TerminalService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminalServiceClient) LoginPasswordless(ctx context.Context, opts ...grpc.CallOption) (TerminalService_LoginPasswordlessClient, error) {
	stream, err := c.cc.NewStream(ctx, &TerminalService_ServiceDesc.Streams[0], "/teleport.terminal.v1.TerminalService/LoginPasswordless", opts...)
	if err != nil {
		return nil, err
	}
	x := &terminalServiceLoginPasswordlessClient{stream}
	return x, nil
}

type TerminalService_LoginPasswordlessClient interface {
	Send(*LoginPasswordlessRequest) error
	Recv() (*LoginPasswordlessResponse, error)
	grpc.ClientStream
}

type terminalServiceLoginPasswordlessClient struct {
	grpc.ClientStream
}

func (x *terminalServiceLoginPasswordlessClient) Send(m *LoginPasswordlessRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *terminalServiceLoginPasswordlessClient) Recv() (*LoginPasswordlessResponse, error) {
	m := new(LoginPasswordlessResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *terminalServiceClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/teleport.terminal.v1.TerminalService/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminalServiceClient) TransferFile(ctx context.Context, in *FileTransferRequest, opts ...grpc.CallOption) (TerminalService_TransferFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &TerminalService_ServiceDesc.Streams[1], "/teleport.terminal.v1.TerminalService/TransferFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &terminalServiceTransferFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TerminalService_TransferFileClient interface {
	Recv() (*FileTransferProgress, error)
	grpc.ClientStream
}

type terminalServiceTransferFileClient struct {
	grpc.ClientStream
}

func (x *terminalServiceTransferFileClient) Recv() (*FileTransferProgress, error) {
	m := new(FileTransferProgress)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TerminalServiceServer is the server API for TerminalService service.
// All implementations must embed UnimplementedTerminalServiceServer
// for forward compatibility
type TerminalServiceServer interface {
	// ListRootClusters lists root clusters
	ListRootClusters(context.Context, *ListClustersRequest) (*ListClustersResponse, error)
	// ListLeafClusters lists leaf clusters
	ListLeafClusters(context.Context, *ListLeafClustersRequest) (*ListClustersResponse, error)
	// ListDatabases lists databases
	ListDatabases(context.Context, *ListDatabasesRequest) (*ListDatabasesResponse, error)
	// ListDatabaseUsers lists allowed users for the given database based on the role set.
	ListDatabaseUsers(context.Context, *ListDatabaseUsersRequest) (*ListDatabaseUsersResponse, error)
	// ListServers lists servers
	ListServers(context.Context, *ListServersRequest) (*ListServersResponse, error)
	// ListKubes list kubes
	ListKubes(context.Context, *ListKubesRequest) (*ListKubesResponse, error)
	// ListApps list apps
	ListApps(context.Context, *ListAppsRequest) (*ListAppsResponse, error)
	// AddCluster adds a cluster to profile
	AddCluster(context.Context, *AddClusterRequest) (*Cluster, error)
	// RemoveCluster removes a cluster from profile
	RemoveCluster(context.Context, *RemoveClusterRequest) (*EmptyResponse, error)
	// ListGateways lists gateways
	ListGateways(context.Context, *ListGatewaysRequest) (*ListGatewaysResponse, error)
	// CreateGateway creates a gateway
	CreateGateway(context.Context, *CreateGatewayRequest) (*Gateway, error)
	// RemoveGateway removes a gateway
	RemoveGateway(context.Context, *RemoveGatewayRequest) (*EmptyResponse, error)
	// RestartGateway stops a gateway and starts a new with identical parameters, keeping the
	// original URI. A temporary workaround until it's possible to refresh certs in a running
	// database proxy.
	RestartGateway(context.Context, *RestartGatewayRequest) (*EmptyResponse, error)
	// SetGatewayTargetSubresourceName changes the TargetSubresourceName field of gateway.Gateway
	// and returns the updated version of gateway.Gateway.
	//
	// In Connect this is used to update the db name of a db connection along with the CLI command.
	SetGatewayTargetSubresourceName(context.Context, *SetGatewayTargetSubresourceNameRequest) (*Gateway, error)
	// SetGatewayLocalPort starts a new gateway on the new port, stops the old gateway and then
	// assigns the URI of the old gateway to the new one. It does so without fetching a new db cert.
	SetGatewayLocalPort(context.Context, *SetGatewayLocalPortRequest) (*Gateway, error)
	// GetAuthSettings returns cluster auth settigns
	GetAuthSettings(context.Context, *GetAuthSettingsRequest) (*AuthSettings, error)
	// GetCluster returns a cluster
	GetCluster(context.Context, *GetClusterRequest) (*Cluster, error)
	// Login logs in a user to a cluster
	Login(context.Context, *LoginRequest) (*EmptyResponse, error)
	// LoginPasswordless logs in a user to a cluster passwordlessly.
	//
	// The RPC is streaming both ways and the message sequence example for hardware keys are:
	// (-> means client-to-server, <- means server-to-client)
	//
	// Hardware keys:
	// -> Init
	// <- Send PasswordlessPrompt enum TAP to choose a device
	// -> Receive TAP device response
	// <- Send PasswordlessPrompt enum PIN
	// -> Receive PIN response
	// <- Send PasswordlessPrompt enum RETAP to confirm
	// -> Receive RETAP device response
	// <- Send list of credentials (e.g. usernames) associated with device
	// -> Receive the index number associated with the selected credential in list
	// <- End
	LoginPasswordless(TerminalService_LoginPasswordlessServer) error
	// ClusterLogin logs out a user from cluster
	Logout(context.Context, *LogoutRequest) (*EmptyResponse, error)
	// TransferFile sends a request to download/upload a file
	TransferFile(*FileTransferRequest, TerminalService_TransferFileServer) error
	mustEmbedUnimplementedTerminalServiceServer()
}

// UnimplementedTerminalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTerminalServiceServer struct {
}

func (UnimplementedTerminalServiceServer) ListRootClusters(context.Context, *ListClustersRequest) (*ListClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRootClusters not implemented")
}
func (UnimplementedTerminalServiceServer) ListLeafClusters(context.Context, *ListLeafClustersRequest) (*ListClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLeafClusters not implemented")
}
func (UnimplementedTerminalServiceServer) ListDatabases(context.Context, *ListDatabasesRequest) (*ListDatabasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDatabases not implemented")
}
func (UnimplementedTerminalServiceServer) ListDatabaseUsers(context.Context, *ListDatabaseUsersRequest) (*ListDatabaseUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDatabaseUsers not implemented")
}
func (UnimplementedTerminalServiceServer) ListServers(context.Context, *ListServersRequest) (*ListServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServers not implemented")
}
func (UnimplementedTerminalServiceServer) ListKubes(context.Context, *ListKubesRequest) (*ListKubesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKubes not implemented")
}
func (UnimplementedTerminalServiceServer) ListApps(context.Context, *ListAppsRequest) (*ListAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApps not implemented")
}
func (UnimplementedTerminalServiceServer) AddCluster(context.Context, *AddClusterRequest) (*Cluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCluster not implemented")
}
func (UnimplementedTerminalServiceServer) RemoveCluster(context.Context, *RemoveClusterRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCluster not implemented")
}
func (UnimplementedTerminalServiceServer) ListGateways(context.Context, *ListGatewaysRequest) (*ListGatewaysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGateways not implemented")
}
func (UnimplementedTerminalServiceServer) CreateGateway(context.Context, *CreateGatewayRequest) (*Gateway, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGateway not implemented")
}
func (UnimplementedTerminalServiceServer) RemoveGateway(context.Context, *RemoveGatewayRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveGateway not implemented")
}
func (UnimplementedTerminalServiceServer) RestartGateway(context.Context, *RestartGatewayRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartGateway not implemented")
}
func (UnimplementedTerminalServiceServer) SetGatewayTargetSubresourceName(context.Context, *SetGatewayTargetSubresourceNameRequest) (*Gateway, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGatewayTargetSubresourceName not implemented")
}
func (UnimplementedTerminalServiceServer) SetGatewayLocalPort(context.Context, *SetGatewayLocalPortRequest) (*Gateway, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGatewayLocalPort not implemented")
}
func (UnimplementedTerminalServiceServer) GetAuthSettings(context.Context, *GetAuthSettingsRequest) (*AuthSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthSettings not implemented")
}
func (UnimplementedTerminalServiceServer) GetCluster(context.Context, *GetClusterRequest) (*Cluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCluster not implemented")
}
func (UnimplementedTerminalServiceServer) Login(context.Context, *LoginRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedTerminalServiceServer) LoginPasswordless(TerminalService_LoginPasswordlessServer) error {
	return status.Errorf(codes.Unimplemented, "method LoginPasswordless not implemented")
}
func (UnimplementedTerminalServiceServer) Logout(context.Context, *LogoutRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedTerminalServiceServer) TransferFile(*FileTransferRequest, TerminalService_TransferFileServer) error {
	return status.Errorf(codes.Unimplemented, "method TransferFile not implemented")
}
func (UnimplementedTerminalServiceServer) mustEmbedUnimplementedTerminalServiceServer() {}

// UnsafeTerminalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TerminalServiceServer will
// result in compilation errors.
type UnsafeTerminalServiceServer interface {
	mustEmbedUnimplementedTerminalServiceServer()
}

func RegisterTerminalServiceServer(s grpc.ServiceRegistrar, srv TerminalServiceServer) {
	s.RegisterService(&TerminalService_ServiceDesc, srv)
}

func _TerminalService_ListRootClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalServiceServer).ListRootClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teleport.terminal.v1.TerminalService/ListRootClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalServiceServer).ListRootClusters(ctx, req.(*ListClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminalService_ListLeafClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLeafClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalServiceServer).ListLeafClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teleport.terminal.v1.TerminalService/ListLeafClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalServiceServer).ListLeafClusters(ctx, req.(*ListLeafClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminalService_ListDatabases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDatabasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalServiceServer).ListDatabases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teleport.terminal.v1.TerminalService/ListDatabases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalServiceServer).ListDatabases(ctx, req.(*ListDatabasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminalService_ListDatabaseUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDatabaseUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalServiceServer).ListDatabaseUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teleport.terminal.v1.TerminalService/ListDatabaseUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalServiceServer).ListDatabaseUsers(ctx, req.(*ListDatabaseUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminalService_ListServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalServiceServer).ListServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teleport.terminal.v1.TerminalService/ListServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalServiceServer).ListServers(ctx, req.(*ListServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminalService_ListKubes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKubesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalServiceServer).ListKubes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teleport.terminal.v1.TerminalService/ListKubes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalServiceServer).ListKubes(ctx, req.(*ListKubesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminalService_ListApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalServiceServer).ListApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teleport.terminal.v1.TerminalService/ListApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalServiceServer).ListApps(ctx, req.(*ListAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminalService_AddCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalServiceServer).AddCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teleport.terminal.v1.TerminalService/AddCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalServiceServer).AddCluster(ctx, req.(*AddClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminalService_RemoveCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalServiceServer).RemoveCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teleport.terminal.v1.TerminalService/RemoveCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalServiceServer).RemoveCluster(ctx, req.(*RemoveClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminalService_ListGateways_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGatewaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalServiceServer).ListGateways(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teleport.terminal.v1.TerminalService/ListGateways",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalServiceServer).ListGateways(ctx, req.(*ListGatewaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminalService_CreateGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalServiceServer).CreateGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teleport.terminal.v1.TerminalService/CreateGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalServiceServer).CreateGateway(ctx, req.(*CreateGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminalService_RemoveGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalServiceServer).RemoveGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teleport.terminal.v1.TerminalService/RemoveGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalServiceServer).RemoveGateway(ctx, req.(*RemoveGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminalService_RestartGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalServiceServer).RestartGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teleport.terminal.v1.TerminalService/RestartGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalServiceServer).RestartGateway(ctx, req.(*RestartGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminalService_SetGatewayTargetSubresourceName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGatewayTargetSubresourceNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalServiceServer).SetGatewayTargetSubresourceName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teleport.terminal.v1.TerminalService/SetGatewayTargetSubresourceName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalServiceServer).SetGatewayTargetSubresourceName(ctx, req.(*SetGatewayTargetSubresourceNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminalService_SetGatewayLocalPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGatewayLocalPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalServiceServer).SetGatewayLocalPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teleport.terminal.v1.TerminalService/SetGatewayLocalPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalServiceServer).SetGatewayLocalPort(ctx, req.(*SetGatewayLocalPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminalService_GetAuthSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalServiceServer).GetAuthSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teleport.terminal.v1.TerminalService/GetAuthSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalServiceServer).GetAuthSettings(ctx, req.(*GetAuthSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminalService_GetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalServiceServer).GetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teleport.terminal.v1.TerminalService/GetCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalServiceServer).GetCluster(ctx, req.(*GetClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminalService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teleport.terminal.v1.TerminalService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminalService_LoginPasswordless_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TerminalServiceServer).LoginPasswordless(&terminalServiceLoginPasswordlessServer{stream})
}

type TerminalService_LoginPasswordlessServer interface {
	Send(*LoginPasswordlessResponse) error
	Recv() (*LoginPasswordlessRequest, error)
	grpc.ServerStream
}

type terminalServiceLoginPasswordlessServer struct {
	grpc.ServerStream
}

func (x *terminalServiceLoginPasswordlessServer) Send(m *LoginPasswordlessResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *terminalServiceLoginPasswordlessServer) Recv() (*LoginPasswordlessRequest, error) {
	m := new(LoginPasswordlessRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TerminalService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teleport.terminal.v1.TerminalService/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalServiceServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminalService_TransferFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileTransferRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TerminalServiceServer).TransferFile(m, &terminalServiceTransferFileServer{stream})
}

type TerminalService_TransferFileServer interface {
	Send(*FileTransferProgress) error
	grpc.ServerStream
}

type terminalServiceTransferFileServer struct {
	grpc.ServerStream
}

func (x *terminalServiceTransferFileServer) Send(m *FileTransferProgress) error {
	return x.ServerStream.SendMsg(m)
}

// TerminalService_ServiceDesc is the grpc.ServiceDesc for TerminalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TerminalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.terminal.v1.TerminalService",
	HandlerType: (*TerminalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRootClusters",
			Handler:    _TerminalService_ListRootClusters_Handler,
		},
		{
			MethodName: "ListLeafClusters",
			Handler:    _TerminalService_ListLeafClusters_Handler,
		},
		{
			MethodName: "ListDatabases",
			Handler:    _TerminalService_ListDatabases_Handler,
		},
		{
			MethodName: "ListDatabaseUsers",
			Handler:    _TerminalService_ListDatabaseUsers_Handler,
		},
		{
			MethodName: "ListServers",
			Handler:    _TerminalService_ListServers_Handler,
		},
		{
			MethodName: "ListKubes",
			Handler:    _TerminalService_ListKubes_Handler,
		},
		{
			MethodName: "ListApps",
			Handler:    _TerminalService_ListApps_Handler,
		},
		{
			MethodName: "AddCluster",
			Handler:    _TerminalService_AddCluster_Handler,
		},
		{
			MethodName: "RemoveCluster",
			Handler:    _TerminalService_RemoveCluster_Handler,
		},
		{
			MethodName: "ListGateways",
			Handler:    _TerminalService_ListGateways_Handler,
		},
		{
			MethodName: "CreateGateway",
			Handler:    _TerminalService_CreateGateway_Handler,
		},
		{
			MethodName: "RemoveGateway",
			Handler:    _TerminalService_RemoveGateway_Handler,
		},
		{
			MethodName: "RestartGateway",
			Handler:    _TerminalService_RestartGateway_Handler,
		},
		{
			MethodName: "SetGatewayTargetSubresourceName",
			Handler:    _TerminalService_SetGatewayTargetSubresourceName_Handler,
		},
		{
			MethodName: "SetGatewayLocalPort",
			Handler:    _TerminalService_SetGatewayLocalPort_Handler,
		},
		{
			MethodName: "GetAuthSettings",
			Handler:    _TerminalService_GetAuthSettings_Handler,
		},
		{
			MethodName: "GetCluster",
			Handler:    _TerminalService_GetCluster_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _TerminalService_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _TerminalService_Logout_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LoginPasswordless",
			Handler:       _TerminalService_LoginPasswordless_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "TransferFile",
			Handler:       _TerminalService_TransferFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1/service.proto",
}
